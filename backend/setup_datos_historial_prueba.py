"""
Script para configurar datos de prueba realistas para el historial de validaciones.

Este script:
1. Crea veh√≠culos con resoluciones asociadas
2. Establece relaciones correctas entre veh√≠culos y resoluciones
3. Simula un escenario real con m√∫ltiples tr√°mites por veh√≠culo
4. Permite probar el sistema de historial de validaciones
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.mock_vehiculo_service import MockVehiculoService
from app.services.mock_resolucion_service import MockResolucionService
from app.models.vehiculo import VehiculoCreate, DatosTecnicos
from app.models.resolucion import ResolucionCreate

async def setup_datos_prueba():
    """Configurar datos de prueba realistas"""
    
    print("üîß CONFIGURANDO DATOS DE PRUEBA PARA HISTORIAL DE VALIDACIONES")
    print("=" * 65)
    
    vehiculo_service = MockVehiculoService()
    resolucion_service = MockResolucionService()
    
    # Limpiar datos existentes
    vehiculo_service.vehiculos.clear()
    resolucion_service.resoluciones.clear()
    
    print("üßπ Datos existentes limpiados")
    
    # 1. Crear veh√≠culos de prueba
    print("\nüöó 1. CREANDO VEH√çCULOS DE PRUEBA")
    print("-" * 35)
    
    vehiculos_data = [
        {
            "placa": "ABC-123",
            "empresaActualId": "1",
            "categoria": "M1",
            "marca": "Toyota",
            "modelo": "Hiace",
            "anioFabricacion": 2020,
            "datosTecnicos": DatosTecnicos(
                motor="2TR-FE",
                chasis="TRH200",
                ejes=2,
                asientos=15,
                pesoNeto=2500.0,
                pesoBruto=3500.0,
                medidas={"largo": 5.38, "ancho": 1.88, "alto": 2.28},
                tipoCombustible="GASOLINA",
                cilindrada=2.7,
                potencia=163.0
            )
        },
        {
            "placa": "XYZ-789",
            "empresaActualId": "1",
            "categoria": "M2",
            "marca": "Mercedes",
            "modelo": "Sprinter",
            "anioFabricacion": 2019,
            "datosTecnicos": DatosTecnicos(
                motor="OM651",
                chasis="W906",
                ejes=2,
                asientos=20,
                pesoNeto=3200.0,
                pesoBruto=4500.0,
                medidas={"largo": 7.36, "ancho": 2.02, "alto": 2.73},
                tipoCombustible="DIESEL",
                cilindrada=2.1,
                potencia=143.0
            )
        },
        {
            "placa": "DEF-456",
            "empresaActualId": "2",
            "categoria": "M3",
            "marca": "Volvo",
            "modelo": "B7R",
            "anioFabricacion": 2018,
            "datosTecnicos": DatosTecnicos(
                motor="D7E",
                chasis="B7RLE",
                ejes=2,
                asientos=45,
                pesoNeto=8500.0,
                pesoBruto=12000.0,
                medidas={"largo": 12.0, "ancho": 2.55, "alto": 3.2},
                tipoCombustible="DIESEL",
                cilindrada=7.2,
                potencia=290.0
            )
        },
        {
            "placa": "GHI-789",
            "empresaActualId": "2",
            "categoria": "N1",
            "marca": "Isuzu",
            "modelo": "NPR",
            "anioFabricacion": 2021,
            "datosTecnicos": DatosTecnicos(
                motor="4JJ1",
                chasis="NPR75",
                ejes=2,
                asientos=3,
                pesoNeto=2800.0,
                pesoBruto=7500.0,
                medidas={"largo": 6.2, "ancho": 2.0, "alto": 2.5},
                tipoCombustible="DIESEL",
                cilindrada=3.0,
                potencia=150.0
            )
        },
        {
            "placa": "JKL-012",
            "empresaActualId": "3",
            "categoria": "M1",
            "marca": "Hyundai",
            "modelo": "H1",
            "anioFabricacion": 2022,
            "datosTecnicos": DatosTecnicos(
                motor="D4CB",
                chasis="TQ",
                ejes=2,
                asientos=12,
                pesoNeto=2200.0,
                pesoBruto=3200.0,
                medidas={"largo": 5.13, "ancho": 1.92, "alto": 1.99},
                tipoCombustible="DIESEL",
                cilindrada=2.5,
                potencia=170.0
            )
        }
    ]
    
    vehiculos_creados = {}
    for vehiculo_data in vehiculos_data:
        vehiculo_create = VehiculoCreate(**vehiculo_data)
        vehiculo = await vehiculo_service.create_vehiculo(vehiculo_create)
        vehiculos_creados[vehiculo.placa] = vehiculo
        print(f"‚úÖ Veh√≠culo creado: {vehiculo.placa} - {vehiculo.marca} {vehiculo.modelo}")
    
    print(f"\nüìä Total de veh√≠culos creados: {len(vehiculos_creados)}")
    
    # 2. Crear resoluciones con veh√≠culos asociados
    print("\nüèõÔ∏è 2. CREANDO RESOLUCIONES CON VEH√çCULOS ASOCIADOS")
    print("-" * 50)
    
    # Fechas base para simular cronolog√≠a
    fecha_base = datetime(2023, 1, 1)
    
    resoluciones_data = [
        # Resoluci√≥n 1: Primigenia para ABC-123 (m√°s antigua)
        {
            "numero": "0001",
            "fechaEmision": fecha_base,
            "empresaId": "1",
            "expedienteId": "1",
            "tipoResolucion": "PADRE",
            "tipoTramite": "PRIMIGENIA",
            "descripcion": "Resoluci√≥n primigenia para veh√≠culo ABC-123",
            "vehiculosHabilitadosIds": [vehiculos_creados["ABC-123"].id],
            "rutasAutorizadasIds": ["1"]
        },
        # Resoluci√≥n 2: Incremento para ABC-123 y XYZ-789
        {
            "numero": "0002",
            "fechaEmision": fecha_base + timedelta(days=90),
            "empresaId": "1",
            "expedienteId": "2",
            "tipoResolucion": "HIJO",
            "tipoTramite": "INCREMENTO",
            "descripcion": "Incremento de flota - ABC-123 y XYZ-789",
            "vehiculosHabilitadosIds": [vehiculos_creados["ABC-123"].id, vehiculos_creados["XYZ-789"].id],
            "rutasAutorizadasIds": ["1", "2"]
        },
        # Resoluci√≥n 3: Primigenia para DEF-456
        {
            "numero": "0003",
            "fechaEmision": fecha_base + timedelta(days=120),
            "empresaId": "2",
            "expedienteId": "3",
            "tipoResolucion": "PADRE",
            "tipoTramite": "PRIMIGENIA",
            "descripcion": "Resoluci√≥n primigenia para veh√≠culo DEF-456",
            "vehiculosHabilitadosIds": [vehiculos_creados["DEF-456"].id],
            "rutasAutorizadasIds": ["3"]
        },
        # Resoluci√≥n 4: Renovaci√≥n para ABC-123 (tercera resoluci√≥n para este veh√≠culo)
        {
            "numero": "0004",
            "fechaEmision": fecha_base + timedelta(days=180),
            "empresaId": "1",
            "expedienteId": "4",
            "tipoResolucion": "HIJO",
            "tipoTramite": "RENOVACION",
            "descripcion": "Renovaci√≥n de autorizaci√≥n para ABC-123",
            "vehiculosHabilitadosIds": [vehiculos_creados["ABC-123"].id],
            "rutasAutorizadasIds": ["1"]
        },
        # Resoluci√≥n 5: Incremento para GHI-789 y JKL-012
        {
            "numero": "0005",
            "fechaEmision": fecha_base + timedelta(days=240),
            "empresaId": "2",
            "expedienteId": "5",
            "tipoResolucion": "HIJO",
            "tipoTramite": "INCREMENTO",
            "descripcion": "Incremento de flota - GHI-789 y JKL-012",
            "vehiculosHabilitadosIds": [vehiculos_creados["GHI-789"].id, vehiculos_creados["JKL-012"].id],
            "rutasAutorizadasIds": ["4", "5"]
        },
        # Resoluci√≥n 6: Sustituci√≥n para XYZ-789 (segunda resoluci√≥n para este veh√≠culo)
        {
            "numero": "0006",
            "fechaEmision": fecha_base + timedelta(days=300),
            "empresaId": "1",
            "expedienteId": "6",
            "tipoResolucion": "HIJO",
            "tipoTramite": "SUSTITUCION",
            "descripcion": "Sustituci√≥n de veh√≠culo XYZ-789",
            "vehiculosHabilitadosIds": [vehiculos_creados["XYZ-789"].id],
            "rutasAutorizadasIds": ["2"]
        },
        # Resoluci√≥n 7: Otros para DEF-456 (segunda resoluci√≥n para este veh√≠culo)
        {
            "numero": "0007",
            "fechaEmision": fecha_base + timedelta(days=360),
            "empresaId": "2",
            "expedienteId": "7",
            "tipoResolucion": "HIJO",
            "tipoTramite": "OTROS",
            "descripcion": "Modificaci√≥n de rutas para DEF-456",
            "vehiculosHabilitadosIds": [vehiculos_creados["DEF-456"].id],
            "rutasAutorizadasIds": ["3", "6"]
        }
    ]
    
    resoluciones_creadas = {}
    for i, resolucion_data in enumerate(resoluciones_data, 1):
        # Crear la resoluci√≥n
        numero_completo = f"R-{resolucion_data['numero']}-2023"
        resolucion_create = ResolucionCreate(
            nroResolucion=numero_completo,
            fechaEmision=resolucion_data["fechaEmision"],
            fechaVigenciaInicio=resolucion_data["fechaEmision"],
            fechaVigenciaFin=resolucion_data["fechaEmision"] + timedelta(days=1825),  # 5 a√±os
            empresaId=resolucion_data["empresaId"],
            expedienteId=resolucion_data["expedienteId"],
            tipoResolucion=resolucion_data["tipoResolucion"],
            tipoTramite=resolucion_data["tipoTramite"],
            descripcion=resolucion_data["descripcion"],
            vehiculosHabilitadosIds=resolucion_data["vehiculosHabilitadosIds"],
            rutasAutorizadasIds=resolucion_data["rutasAutorizadasIds"],
            usuarioEmisionId="user1"  # Usuario por defecto
        )
        
        resolucion = await resolucion_service.create_resolucion(resolucion_create)
        resoluciones_creadas[f"R-{resolucion_data['numero']}-2023"] = resolucion
        
        # Mostrar informaci√≥n de la resoluci√≥n creada
        vehiculos_placas = []
        for vehiculo_id in resolucion_data["vehiculosHabilitadosIds"]:
            for placa, vehiculo in vehiculos_creados.items():
                if vehiculo.id == vehiculo_id:
                    vehiculos_placas.append(placa)
                    break
        
        print(f"‚úÖ Resoluci√≥n {i}: R-{resolucion_data['numero']}-2023")
        print(f"   üìÖ Fecha: {resolucion_data['fechaEmision'].strftime('%Y-%m-%d')}")
        print(f"   üöó Veh√≠culos: {', '.join(vehiculos_placas)}")
        print(f"   üìã Tipo: {resolucion_data['tipoTramite']}")
    
    print(f"\nüìä Total de resoluciones creadas: {len(resoluciones_creadas)}")
    
    # 3. Mostrar resumen de relaciones
    print("\nüìä 3. RESUMEN DE RELACIONES VEH√çCULO-RESOLUCI√ìN")
    print("-" * 50)
    
    print("üîó Relaciones por veh√≠culo (orden cronol√≥gico esperado):")
    
    # ABC-123: 3 resoluciones (R-0001, R-0002, R-0004)
    print("  üöó ABC-123 (Toyota Hiace):")
    print("    1Ô∏è‚É£ R-0001-2023 (2023-01-01) - PRIMIGENIA")
    print("    2Ô∏è‚É£ R-0002-2023 (2023-04-01) - INCREMENTO")
    print("    3Ô∏è‚É£ R-0004-2023 (2023-06-29) - RENOVACION")
    print("    üìà Historial esperado: #3")
    
    # XYZ-789: 2 resoluciones (R-0002, R-0006)
    print("  üöó XYZ-789 (Mercedes Sprinter):")
    print("    1Ô∏è‚É£ R-0002-2023 (2023-04-01) - INCREMENTO")
    print("    2Ô∏è‚É£ R-0006-2023 (2023-10-27) - SUSTITUCION")
    print("    üìà Historial esperado: #2")
    
    # DEF-456: 2 resoluciones (R-0003, R-0007)
    print("  üöó DEF-456 (Volvo B7R):")
    print("    1Ô∏è‚É£ R-0003-2023 (2023-05-01) - PRIMIGENIA")
    print("    2Ô∏è‚É£ R-0007-2023 (2023-12-26) - OTROS")
    print("    üìà Historial esperado: #2")
    
    # GHI-789: 1 resoluci√≥n (R-0005)
    print("  üöó GHI-789 (Isuzu NPR):")
    print("    1Ô∏è‚É£ R-0005-2023 (2023-08-28) - INCREMENTO")
    print("    üìà Historial esperado: #1")
    
    # JKL-012: 1 resoluci√≥n (R-0005)
    print("  üöó JKL-012 (Hyundai H1):")
    print("    1Ô∏è‚É£ R-0005-2023 (2023-08-28) - INCREMENTO")
    print("    üìà Historial esperado: #1")
    
    print("\n‚úÖ DATOS DE PRUEBA CONFIGURADOS EXITOSAMENTE")
    print("üéØ El sistema ahora tiene datos realistas para probar el historial de validaciones")
    
    return vehiculos_creados, resoluciones_creadas

if __name__ == "__main__":
    print("üîß CONFIGURADOR DE DATOS DE PRUEBA")
    print("=" * 40)
    print("Este script configura datos realistas para probar el historial de validaciones")
    print()
    
    # Ejecutar configuraci√≥n
    vehiculos, resoluciones = asyncio.run(setup_datos_prueba())
    
    print(f"\nüìã RESUMEN FINAL:")
    print(f"‚úÖ {len(vehiculos)} veh√≠culos creados")
    print(f"‚úÖ {len(resoluciones)} resoluciones creadas")
    print(f"‚úÖ Relaciones veh√≠culo-resoluci√≥n establecidas")
    print(f"‚úÖ Cronolog√≠a de tr√°mites simulada")
    
    print(f"\nüöÄ SIGUIENTE PASO:")
    print(f"Ejecuta: python backend/test_historial_validaciones.py")
    print(f"Para probar el sistema de historial con estos datos realistas")