"""
Script de prueba para el sistema de historial de validaciones de veh√≠culos.

Este script prueba:
1. C√°lculo autom√°tico del historial de validaciones
2. Actualizaci√≥n masiva de historial para todos los veh√≠culos
3. Estad√≠sticas del historial
4. Historial detallado por veh√≠culo
5. Rec√°lculo por empresa
"""

import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.vehiculo_historial_service import VehiculoHistorialService
from app.services.mock_vehiculo_service import MockVehiculoService
from app.services.mock_resolucion_service import MockResolucionService

async def test_historial_validaciones():
    """Funci√≥n principal de prueba"""
    
    print("üöÄ INICIANDO PRUEBAS DE HISTORIAL DE VALIDACIONES")
    print("=" * 60)
    
    # Inicializar servicios
    historial_service = VehiculoHistorialService()
    vehiculo_service = MockVehiculoService()
    resolucion_service = MockResolucionService()
    
    # 1. Mostrar estado inicial
    print("\nüìä 1. ESTADO INICIAL")
    print("-" * 30)
    
    vehiculos = await vehiculo_service.get_vehiculos_activos()
    resoluciones = await resolucion_service.get_resoluciones_activas()
    
    print(f"Total de veh√≠culos activos: {len(vehiculos)}")
    print(f"Total de resoluciones activas: {len(resoluciones)}")
    
    # Mostrar algunos veh√≠culos de ejemplo
    print("\nüöó Veh√≠culos de ejemplo:")
    for i, vehiculo in enumerate(vehiculos[:5]):
        print(f"  {i+1}. {vehiculo.placa} - Empresa: {vehiculo.empresaActualId} - Resoluci√≥n: {vehiculo.resolucionId}")
    
    # Mostrar algunas resoluciones de ejemplo
    print("\nüèõÔ∏è Resoluciones de ejemplo:")
    for i, resolucion in enumerate(resoluciones[:5]):
        vehiculos_count = len(resolucion.vehiculosHabilitadosIds) if resolucion.vehiculosHabilitadosIds else 0
        print(f"  {i+1}. {resolucion.nroResolucion} - Fecha: {resolucion.fechaEmision.strftime('%Y-%m-%d')} - Veh√≠culos: {vehiculos_count}")
    
    # 2. Calcular historial para todos los veh√≠culos
    print("\nüîÑ 2. CALCULANDO HISTORIAL DE VALIDACIONES")
    print("-" * 45)
    
    historial_map = await historial_service.calcular_historial_validaciones_todos()
    
    print(f"‚úÖ Historial calculado para {len(historial_map)} veh√≠culos")
    
    # Mostrar algunos ejemplos del historial calculado
    print("\nüìã Ejemplos de historial calculado:")
    count = 0
    for vehiculo_id, numero_historial in historial_map.items():
        if count >= 10:  # Mostrar solo los primeros 10
            break
        vehiculo = await vehiculo_service.get_vehiculo_by_id(vehiculo_id)
        if vehiculo:
            print(f"  ‚Ä¢ {vehiculo.placa}: Historial #{numero_historial}")
            count += 1
    
    # 3. Actualizar historial en todos los veh√≠culos
    print("\nüíæ 3. ACTUALIZANDO HISTORIAL EN BASE DE DATOS")
    print("-" * 45)
    
    resultado_actualizacion = await historial_service.actualizar_historial_todos_vehiculos()
    
    print(f"‚úÖ Actualizaci√≥n completada:")
    print(f"  ‚Ä¢ Total procesados: {resultado_actualizacion['total_procesados']}")
    print(f"  ‚Ä¢ Actualizados: {resultado_actualizacion['actualizados']}")
    print(f"  ‚Ä¢ Errores: {resultado_actualizacion['errores']}")
    
    # 4. Generar estad√≠sticas del historial
    print("\nüìä 4. ESTAD√çSTICAS DEL HISTORIAL")
    print("-" * 35)
    
    estadisticas = await historial_service.obtener_estadisticas_historial()
    
    print("üìà Resumen general:")
    resumen = estadisticas['resumen']
    print(f"  ‚Ä¢ Total de veh√≠culos: {resumen['total_vehiculos']}")
    print(f"  ‚Ä¢ Con historial: {resumen['vehiculos_con_historial']}")
    print(f"  ‚Ä¢ Sin historial: {resumen['vehiculos_sin_historial']}")
    print(f"  ‚Ä¢ Porcentaje con historial: {resumen['porcentaje_con_historial']}%")
    
    print(f"\nüìä Estad√≠sticas de resoluciones:")
    print(f"  ‚Ä¢ Promedio de resoluciones por veh√≠culo: {estadisticas['promedio_resoluciones']}")
    print(f"  ‚Ä¢ M√°ximo de resoluciones: {estadisticas['maximo_resoluciones']}")
    print(f"  ‚Ä¢ M√≠nimo de resoluciones: {estadisticas['minimo_resoluciones']}")
    
    print(f"\nüèÜ Top 5 veh√≠culos con m√°s resoluciones:")
    for i, vehiculo_info in enumerate(estadisticas['top_vehiculos_mas_resoluciones'][:5]):
        print(f"  {i+1}. {vehiculo_info['placa']} - {vehiculo_info['numero_historial']} resoluciones")
        print(f"     {vehiculo_info['marca']} {vehiculo_info['modelo']} - Empresa: {vehiculo_info['empresa_id']}")
    
    print(f"\nüìà Distribuci√≥n por n√∫mero de resoluciones:")
    for numero, cantidad in sorted(estadisticas['distribucion_historial'].items()):
        print(f"  ‚Ä¢ {numero} resoluci√≥n(es): {cantidad} veh√≠culos")
    
    # 5. Obtener historial detallado de un veh√≠culo espec√≠fico
    print("\nüîç 5. HISTORIAL DETALLADO DE VEH√çCULO")
    print("-" * 40)
    
    # Buscar un veh√≠culo con historial interesante
    vehiculo_ejemplo = None
    for vehiculo_id, numero_historial in historial_map.items():
        if numero_historial > 1:  # Buscar uno con m√∫ltiples resoluciones
            vehiculo_ejemplo = await vehiculo_service.get_vehiculo_by_id(vehiculo_id)
            break
    
    if vehiculo_ejemplo:
        print(f"üìã Analizando veh√≠culo: {vehiculo_ejemplo.placa}")
        
        historial_detallado = await historial_service.obtener_historial_vehiculo_detallado(vehiculo_ejemplo.id)
        
        vehiculo_info = historial_detallado['vehiculo']
        print(f"  ‚Ä¢ Placa: {vehiculo_info['placa']}")
        print(f"  ‚Ä¢ Marca/Modelo: {vehiculo_info['marca']} {vehiculo_info['modelo']}")
        print(f"  ‚Ä¢ Empresa actual: {vehiculo_info['empresa_actual_id']}")
        print(f"  ‚Ä¢ N√∫mero de historial actual: {vehiculo_info['numero_historial_actual']}")
        print(f"  ‚Ä¢ Total de resoluciones: {historial_detallado['total_resoluciones']}")
        
        if historial_detallado['resolucion_mas_antigua']:
            print(f"  ‚Ä¢ Resoluci√≥n m√°s antigua: {historial_detallado['resolucion_mas_antigua']['numero']} ({historial_detallado['resolucion_mas_antigua']['fecha'].strftime('%Y-%m-%d')})")
        
        if historial_detallado['resolucion_mas_reciente']:
            print(f"  ‚Ä¢ Resoluci√≥n m√°s reciente: {historial_detallado['resolucion_mas_reciente']['numero']} ({historial_detallado['resolucion_mas_reciente']['fecha'].strftime('%Y-%m-%d')})")
        
        print(f"\nüìú Historial completo de resoluciones:")
        for resolucion in historial_detallado['historial_resoluciones']:
            print(f"  {resolucion['numero_secuencial']}. {resolucion['numero_resolucion']} - {resolucion['fecha_emision'].strftime('%Y-%m-%d')}")
            print(f"     Tipo: {resolucion['tipo_resolucion']} | Tr√°mite: {resolucion['tipo_tramite']} | Estado: {resolucion['estado']}")
    
    # 6. Probar rec√°lculo por empresa
    print("\nüè¢ 6. REC√ÅLCULO POR EMPRESA")
    print("-" * 30)
    
    # Obtener la primera empresa que tenga veh√≠culos
    empresa_ejemplo = None
    for vehiculo in vehiculos:
        if vehiculo.empresaActualId:
            empresa_ejemplo = vehiculo.empresaActualId
            break
    
    if empresa_ejemplo:
        print(f"üîÑ Recalculando historial para empresa: {empresa_ejemplo}")
        
        resultado_empresa = await historial_service.recalcular_historial_por_empresa(empresa_ejemplo)
        
        print(f"‚úÖ Rec√°lculo completado:")
        print(f"  ‚Ä¢ Empresa ID: {resultado_empresa['empresa_id']}")
        print(f"  ‚Ä¢ Total de veh√≠culos: {resultado_empresa['total_vehiculos']}")
        print(f"  ‚Ä¢ Actualizados: {resultado_empresa['actualizados']}")
        print(f"  ‚Ä¢ Errores: {resultado_empresa['errores']}")
        
        print(f"\nüìä Historial por veh√≠culo en la empresa:")
        for vehiculo_id, numero_historial in resultado_empresa['historial_empresa'].items():
            vehiculo = await vehiculo_service.get_vehiculo_by_id(vehiculo_id)
            if vehiculo:
                print(f"  ‚Ä¢ {vehiculo.placa}: Historial #{numero_historial}")
    
    # 7. Verificar que los datos se guardaron correctamente
    print("\n‚úÖ 7. VERIFICACI√ìN FINAL")
    print("-" * 25)
    
    vehiculos_actualizados = await vehiculo_service.get_vehiculos_activos()
    vehiculos_con_historial = [v for v in vehiculos_actualizados if v.numeroHistorialValidacion is not None]
    
    print(f"üìä Verificaci√≥n de datos guardados:")
    print(f"  ‚Ä¢ Total de veh√≠culos: {len(vehiculos_actualizados)}")
    print(f"  ‚Ä¢ Con historial guardado: {len(vehiculos_con_historial)}")
    print(f"  ‚Ä¢ Porcentaje guardado: {(len(vehiculos_con_historial) / len(vehiculos_actualizados) * 100):.1f}%")
    
    print(f"\nüîç Ejemplos de veh√≠culos con historial guardado:")
    for i, vehiculo in enumerate(vehiculos_con_historial[:5]):
        print(f"  {i+1}. {vehiculo.placa}: Historial #{vehiculo.numeroHistorialValidacion}")
    
    print("\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE")
    print("=" * 60)

async def test_casos_especiales():
    """Probar casos especiales del historial"""
    
    print("\nüß™ PRUEBAS DE CASOS ESPECIALES")
    print("=" * 40)
    
    historial_service = VehiculoHistorialService()
    vehiculo_service = MockVehiculoService()
    
    # Caso 1: Veh√≠culo sin resoluciones
    print("\n1Ô∏è‚É£ Caso: Veh√≠culo sin resoluciones")
    vehiculos = await vehiculo_service.get_vehiculos_activos()
    vehiculo_sin_resoluciones = None
    
    for vehiculo in vehiculos:
        if not vehiculo.resolucionId:
            vehiculo_sin_resoluciones = vehiculo
            break
    
    if vehiculo_sin_resoluciones:
        try:
            historial = await historial_service.obtener_historial_vehiculo_detallado(vehiculo_sin_resoluciones.id)
            print(f"‚úÖ Veh√≠culo {vehiculo_sin_resoluciones.placa}: {historial['total_resoluciones']} resoluciones")
        except Exception as e:
            print(f"‚ö†Ô∏è Error esperado para veh√≠culo sin resoluciones: {str(e)}")
    
    # Caso 2: Empresa sin veh√≠culos
    print("\n2Ô∏è‚É£ Caso: Empresa inexistente")
    try:
        resultado = await historial_service.recalcular_historial_por_empresa("empresa_inexistente")
        print(f"‚úÖ Empresa inexistente: {resultado['total_vehiculos']} veh√≠culos")
    except Exception as e:
        print(f"‚ö†Ô∏è Error para empresa inexistente: {str(e)}")
    
    print("\n‚úÖ Casos especiales completados")

if __name__ == "__main__":
    print("üöÄ SISTEMA DE HISTORIAL DE VALIDACIONES DE VEH√çCULOS")
    print("=" * 60)
    print("Este script prueba la funcionalidad completa del historial de validaciones")
    print("que asigna n√∫meros secuenciales basados en el orden cronol√≥gico de resoluciones.")
    print()
    
    # Ejecutar pruebas principales
    asyncio.run(test_historial_validaciones())
    
    # Ejecutar casos especiales
    asyncio.run(test_casos_especiales())
    
    print("\nüéØ RESUMEN DE FUNCIONALIDADES PROBADAS:")
    print("‚úÖ C√°lculo autom√°tico de historial de validaciones")
    print("‚úÖ Actualizaci√≥n masiva de historial para todos los veh√≠culos")
    print("‚úÖ Generaci√≥n de estad√≠sticas detalladas")
    print("‚úÖ Historial detallado por veh√≠culo individual")
    print("‚úÖ Rec√°lculo de historial por empresa")
    print("‚úÖ Manejo de casos especiales y errores")
    print("‚úÖ Verificaci√≥n de persistencia de datos")
    
    print("\nüìä El sistema est√° listo para:")
    print("‚Ä¢ Generar reportes estad√≠sticos basados en historial")
    print("‚Ä¢ Identificar veh√≠culos con m√°s tr√°mites/resoluciones")
    print("‚Ä¢ Analizar patrones de validaciones por empresa")
    print("‚Ä¢ Mantener trazabilidad completa de cada veh√≠culo")
    
    print("\nüéâ ¬°SISTEMA DE HISTORIAL IMPLEMENTADO EXITOSAMENTE!")