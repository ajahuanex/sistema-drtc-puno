"""
Script de prueba del sistema completo integrado.

Este script demuestra la integraci√≥n completa de:
1. Sistema de historial de validaciones
2. Filtros avanzados con componentes nuevos
3. Optimizaci√≥n de rendimiento
4. Compatibilidad entre todos los m√≥dulos
5. Funcionalidades de las especificaciones implementadas
"""

import asyncio
import sys
import os
import time
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.vehiculo_historial_service import VehiculoHistorialService
from app.services.vehiculo_filtro_historial_service import VehiculoFiltroHistorialService
from app.services.vehiculo_performance_service import VehiculoPerformanceService, ConsultaOptimizada
from app.services.mock_vehiculo_service import MockVehiculoService
from app.services.mock_resolucion_service import MockResolucionService
from app.services.mock_empresa_service import MockEmpresaService

async def test_sistema_completo():
    """Prueba completa del sistema integrado"""
    
    print("üöÄ PRUEBA DEL SISTEMA COMPLETO INTEGRADO")
    print("=" * 50)
    print("Demostrando la integraci√≥n de:")
    print("‚Ä¢ Sistema de historial de validaciones")
    print("‚Ä¢ Filtros avanzados optimizados")
    print("‚Ä¢ Rendimiento con grandes vol√∫menes")
    print("‚Ä¢ Compatibilidad entre m√≥dulos")
    print()
    
    # Inicializar servicios
    vehiculo_service = MockVehiculoService()
    resolucion_service = MockResolucionService()
    empresa_service = MockEmpresaService()
    historial_service = VehiculoHistorialService()
    filtro_service = VehiculoFiltroHistorialService()
    performance_service = VehiculoPerformanceService()
    
    # 1. Configuraci√≥n inicial del sistema
    print("üìã 1. CONFIGURACI√ìN INICIAL DEL SISTEMA")
    print("-" * 40)
    
    vehiculos = await vehiculo_service.get_vehiculos_activos()
    resoluciones = await resolucion_service.get_resoluciones_activas()
    empresas = await empresa_service.get_empresas_activas()
    
    print(f"‚úÖ Datos base cargados:")
    print(f"  ‚Ä¢ Veh√≠culos: {len(vehiculos)}")
    print(f"  ‚Ä¢ Resoluciones: {len(resoluciones)}")
    print(f"  ‚Ä¢ Empresas: {len(empresas)}")
    
    # 2. Implementar sistema de historial completo
    print("\nüîÑ 2. IMPLEMENTANDO SISTEMA DE HISTORIAL")
    print("-" * 45)
    
    # Calcular historial
    start_time = time.time()
    resultado_historial = await historial_service.actualizar_historial_todos_vehiculos()
    tiempo_historial = time.time() - start_time
    
    print(f"‚úÖ Historial calculado en {tiempo_historial:.3f}s:")
    print(f"  ‚Ä¢ Procesados: {resultado_historial['total_procesados']}")
    print(f"  ‚Ä¢ Actualizados: {resultado_historial['actualizados']}")
    
    # Marcar veh√≠culos actuales vs hist√≥ricos
    start_time = time.time()
    resultado_marcado = await filtro_service.marcar_vehiculos_historial_actual()
    tiempo_marcado = time.time() - start_time
    
    print(f"‚úÖ Marcado completado en {tiempo_marcado:.3f}s:")
    print(f"  ‚Ä¢ Veh√≠culos actuales: {resultado_marcado['vehiculos_actuales']}")
    print(f"  ‚Ä¢ Veh√≠culos hist√≥ricos: {resultado_marcado['vehiculos_historicos']}")
    print(f"  ‚Ä¢ Veh√≠culos bloqueados: {resultado_marcado['bloqueados']}")
    
    # 3. Optimizar rendimiento con √≠ndices
    print("\n‚ö° 3. OPTIMIZANDO RENDIMIENTO CON √çNDICES")
    print("-" * 45)
    
    start_time = time.time()
    estadisticas_indices = await performance_service.inicializar_indices()
    tiempo_indices = time.time() - start_time
    
    print(f"‚úÖ √çndices creados en {tiempo_indices:.3f}s:")
    print(f"  ‚Ä¢ Veh√≠culos indexados: {estadisticas_indices['vehiculos_indexados']}")
    print(f"  ‚Ä¢ √çndices por empresa: {estadisticas_indices['indices_por_empresa']}")
    print(f"  ‚Ä¢ √çndices por estado: {estadisticas_indices['indices_por_estado']}")
    print(f"  ‚Ä¢ √çndices por categor√≠a: {estadisticas_indices['indices_por_categoria']}")
    
    # 4. Probar filtros avanzados optimizados
    print("\nüîç 4. PROBANDO FILTROS AVANZADOS OPTIMIZADOS")
    print("-" * 50)
    
    # Configuraci√≥n de consulta optimizada
    config_optimizada = ConsultaOptimizada(
        usar_cache=True,
        usar_indices=True,
        usar_paginacion=True,
        usar_compresion=False,
        limite_memoria=100
    )
    
    # Prueba 1: Consulta b√°sica optimizada
    start_time = time.time()
    resultado1 = await performance_service.consultar_vehiculos_optimizada(
        filtros={},
        pagina=1,
        limite=20,
        config=config_optimizada
    )
    tiempo1 = time.time() - start_time
    
    print(f"‚úÖ Consulta b√°sica ({tiempo1:.3f}s):")
    print(f"  ‚Ä¢ Registros: {len(resultado1.datos)}")
    print(f"  ‚Ä¢ Total: {resultado1.total_registros}")
    print(f"  ‚Ä¢ Desde cache: {resultado1.desde_cache}")
    print(f"  ‚Ä¢ Tiempo consulta: {resultado1.tiempo_consulta:.3f}s")
    
    # Prueba 2: Consulta con filtros por empresa
    if empresas:
        empresa_test = empresas[0]
        start_time = time.time()
        resultado2 = await performance_service.consultar_vehiculos_optimizada(
            filtros={'empresa_id': empresa_test.id},
            pagina=1,
            limite=10,
            config=config_optimizada
        )
        tiempo2 = time.time() - start_time
        
        print(f"‚úÖ Consulta por empresa ({tiempo2:.3f}s):")
        print(f"  ‚Ä¢ Empresa: {empresa_test.id}")
        print(f"  ‚Ä¢ Registros: {len(resultado2.datos)}")
        print(f"  ‚Ä¢ Desde cache: {resultado2.desde_cache}")
    
    # Prueba 3: Consulta repetida (debe usar cache)
    start_time = time.time()
    resultado3 = await performance_service.consultar_vehiculos_optimizada(
        filtros={},
        pagina=1,
        limite=20,
        config=config_optimizada
    )
    tiempo3 = time.time() - start_time
    
    print(f"‚úÖ Consulta repetida ({tiempo3:.3f}s):")
    print(f"  ‚Ä¢ Desde cache: {resultado3.desde_cache}")
    print(f"  ‚Ä¢ Mejora velocidad: {((tiempo1 - tiempo3) / tiempo1 * 100):.1f}%")
    
    # 5. Probar consultas paralelas masivas
    print("\nüöÄ 5. PROBANDO CONSULTAS PARALELAS MASIVAS")
    print("-" * 45)
    
    # Crear m√∫ltiples filtros para probar paralelismo
    filtros_multiples = [
        {},  # Todos los veh√≠culos
        {'estado': 'ACTIVO'},
        {'categoria': 'M1'},
        {'empresa_id': empresas[0].id if empresas else None},
        {'estado': 'ACTIVO', 'categoria': 'M1'},
    ]
    
    # Filtrar None values
    filtros_multiples = [f for f in filtros_multiples if f.get('empresa_id') is not None or 'empresa_id' not in f]
    
    start_time = time.time()
    resultados_paralelos = await performance_service.optimizar_consulta_masiva(
        filtros_multiples=filtros_multiples,
        limite_por_consulta=15
    )
    tiempo_paralelo = time.time() - start_time
    
    print(f"‚úÖ Consultas paralelas completadas en {tiempo_paralelo:.3f}s:")
    print(f"  ‚Ä¢ Consultas ejecutadas: {len(resultados_paralelos)}")
    print(f"  ‚Ä¢ Registros totales: {sum(len(r.datos) for r in resultados_paralelos)}")
    print(f"  ‚Ä¢ Promedio por consulta: {tiempo_paralelo / len(resultados_paralelos):.3f}s")
    
    # 6. Verificar integraci√≥n con filtros de historial
    print("\nüëÅÔ∏è 6. VERIFICANDO INTEGRACI√ìN CON FILTROS DE HISTORIAL")
    print("-" * 55)
    
    # Consulta solo veh√≠culos visibles
    vehiculos_visibles = await filtro_service.obtener_vehiculos_visibles()
    print(f"‚úÖ Veh√≠culos visibles (historial actual): {len(vehiculos_visibles)}")
    
    # Consulta con filtros combinados
    vehiculos_empresa_visibles = await filtro_service.obtener_vehiculos_con_filtro_historial(
        empresa_id=empresas[0].id if empresas else None,
        incluir_historicos=False,
        solo_bloqueados=False
    )
    print(f"‚úÖ Veh√≠culos empresa visibles: {len(vehiculos_empresa_visibles)}")
    
    # Consulta veh√≠culos bloqueados
    vehiculos_bloqueados = await filtro_service.obtener_vehiculos_con_filtro_historial(
        incluir_historicos=False,
        solo_bloqueados=True
    )
    print(f"‚úÖ Veh√≠culos bloqueados: {len(vehiculos_bloqueados)}")
    
    # 7. Generar estad√≠sticas completas del sistema
    print("\nüìä 7. ESTAD√çSTICAS COMPLETAS DEL SISTEMA")
    print("-" * 45)
    
    # Estad√≠sticas de historial
    estadisticas_historial = await historial_service.obtener_estadisticas_historial()
    resumen_historial = estadisticas_historial['resumen']
    
    # Estad√≠sticas de filtrado
    estadisticas_filtrado = await filtro_service.obtener_estadisticas_filtrado()
    resumen_filtrado = estadisticas_filtrado['resumen']
    
    # Estad√≠sticas de rendimiento
    estadisticas_rendimiento = await performance_service.obtener_estadisticas_rendimiento()
    
    print(f"üìà Estad√≠sticas de Historial:")
    print(f"  ‚Ä¢ Total veh√≠culos: {resumen_historial['total_vehiculos']}")
    print(f"  ‚Ä¢ Con historial: {resumen_historial['vehiculos_con_historial']}")
    print(f"  ‚Ä¢ Promedio resoluciones: {estadisticas_historial['promedio_resoluciones']}")
    
    print(f"\nüîç Estad√≠sticas de Filtrado:")
    print(f"  ‚Ä¢ Veh√≠culos actuales: {resumen_filtrado['vehiculos_actuales']}")
    print(f"  ‚Ä¢ Veh√≠culos bloqueados: {resumen_filtrado['vehiculos_bloqueados']}")
    print(f"  ‚Ä¢ Eficiencia: {estadisticas_filtrado['eficiencia_filtrado']['porcentaje_visibles']}% visibles")
    
    print(f"\n‚ö° Estad√≠sticas de Rendimiento:")
    consultas_stats = estadisticas_rendimiento['consultas']
    cache_stats = estadisticas_rendimiento['cache']
    print(f"  ‚Ä¢ Consultas totales: {consultas_stats['total']}")
    print(f"  ‚Ä¢ Con cache: {consultas_stats['con_cache']}")
    print(f"  ‚Ä¢ Con √≠ndices: {consultas_stats['con_indices']}")
    print(f"  ‚Ä¢ Cache hit ratio: {cache_stats['ratio_exito_porcentaje']:.1f}%")
    print(f"  ‚Ä¢ Tiempo promedio: {consultas_stats['tiempo_promedio_segundos']:.3f}s")
    
    # 8. Probar casos de uso reales integrados
    print("\nüéØ 8. CASOS DE USO REALES INTEGRADOS")
    print("-" * 40)
    
    # Caso 1: Usuario consulta veh√≠culos de su empresa (optimizado)
    if empresas:
        empresa_usuario = empresas[0]
        start_time = time.time()
        
        resultado_usuario = await performance_service.consultar_vehiculos_optimizada(
            filtros={'empresa_id': empresa_usuario.id},
            pagina=1,
            limite=50,
            config=ConsultaOptimizada(usar_cache=True, usar_indices=True)
        )
        
        tiempo_usuario = time.time() - start_time
        print(f"‚úÖ Caso Usuario ({tiempo_usuario:.3f}s):")
        print(f"  ‚Ä¢ Empresa: {empresa_usuario.id}")
        print(f"  ‚Ä¢ Veh√≠culos encontrados: {len(resultado_usuario.datos)}")
        print(f"  ‚Ä¢ Optimizado con cache e √≠ndices")
    
    # Caso 2: Supervisor revisa historial detallado
    if vehiculos_visibles:
        vehiculo_ejemplo = vehiculos_visibles[0]
        start_time = time.time()
        
        historial_detallado = await historial_service.obtener_historial_vehiculo_detallado(vehiculo_ejemplo.id)
        
        tiempo_historial_detallado = time.time() - start_time
        print(f"‚úÖ Caso Supervisor ({tiempo_historial_detallado:.3f}s):")
        print(f"  ‚Ä¢ Veh√≠culo: {vehiculo_ejemplo.placa}")
        if 'historial' in historial_detallado:
            print(f"  ‚Ä¢ Resoluciones en historial: {historial_detallado['historial']['total_resoluciones']}")
        else:
            print(f"  ‚Ä¢ Historial obtenido exitosamente")
    
    # Caso 3: Administrador ve dashboard completo
    start_time = time.time()
    
    # M√∫ltiples consultas para dashboard
    dashboard_queries = [
        {'estado': 'ACTIVO'},
        {'estado': 'INACTIVO'},
        {'categoria': 'M1'},
        {'categoria': 'M2'},
        {'categoria': 'M3'}
    ]
    
    resultados_dashboard = await performance_service.optimizar_consulta_masiva(
        filtros_multiples=dashboard_queries,
        limite_por_consulta=100
    )
    
    tiempo_dashboard = time.time() - start_time
    print(f"‚úÖ Caso Dashboard ({tiempo_dashboard:.3f}s):")
    print(f"  ‚Ä¢ Consultas ejecutadas: {len(resultados_dashboard)}")
    print(f"  ‚Ä¢ Datos para gr√°ficos listos")
    
    print("\nüéâ SISTEMA COMPLETO INTEGRADO VERIFICADO EXITOSAMENTE")
    print("=" * 60)
    
    return {
        'vehiculos_totales': len(vehiculos),
        'vehiculos_visibles': len(vehiculos_visibles),
        'vehiculos_bloqueados': len(vehiculos_bloqueados),
        'tiempo_historial': tiempo_historial,
        'tiempo_indices': tiempo_indices,
        'mejora_cache': ((tiempo1 - tiempo3) / tiempo1 * 100) if tiempo1 > 0 else 0,
        'consultas_paralelas': len(resultados_paralelos),
        'tiempo_dashboard': tiempo_dashboard
    }

async def test_rendimiento_comparativo():
    """Comparar rendimiento antes y despu√©s de optimizaciones"""
    
    print("\nüìä COMPARACI√ìN DE RENDIMIENTO")
    print("=" * 35)
    
    vehiculo_service = MockVehiculoService()
    performance_service = VehiculoPerformanceService()
    
    # Inicializar √≠ndices
    await performance_service.inicializar_indices()
    
    # Prueba 1: Consulta tradicional
    start_time = time.time()
    vehiculos_tradicional = await vehiculo_service.get_vehiculos_activos()
    tiempo_tradicional = time.time() - start_time
    
    # Prueba 2: Consulta optimizada sin cache
    config_sin_cache = ConsultaOptimizada(usar_cache=False, usar_indices=True)
    start_time = time.time()
    resultado_optimizado = await performance_service.consultar_vehiculos_optimizada(
        filtros={},
        limite=len(vehiculos_tradicional),
        config=config_sin_cache
    )
    tiempo_optimizado = time.time() - start_time
    
    # Prueba 3: Consulta optimizada con cache
    config_con_cache = ConsultaOptimizada(usar_cache=True, usar_indices=True)
    start_time = time.time()
    resultado_cache = await performance_service.consultar_vehiculos_optimizada(
        filtros={},
        limite=len(vehiculos_tradicional),
        config=config_con_cache
    )
    tiempo_cache = time.time() - start_time
    
    # Segunda consulta con cache (debe ser m√°s r√°pida)
    start_time = time.time()
    resultado_cache2 = await performance_service.consultar_vehiculos_optimizada(
        filtros={},
        limite=len(vehiculos_tradicional),
        config=config_con_cache
    )
    tiempo_cache2 = time.time() - start_time
    
    print(f"‚è±Ô∏è Comparaci√≥n de tiempos:")
    print(f"  ‚Ä¢ Consulta tradicional: {tiempo_tradicional:.4f}s")
    print(f"  ‚Ä¢ Optimizada sin cache: {tiempo_optimizado:.4f}s")
    print(f"  ‚Ä¢ Optimizada con cache (1¬™): {tiempo_cache:.4f}s")
    print(f"  ‚Ä¢ Optimizada con cache (2¬™): {tiempo_cache2:.4f}s")
    
    print(f"\nüìà Mejoras de rendimiento:")
    mejora_indices = ((tiempo_tradicional - tiempo_optimizado) / tiempo_tradicional * 100) if tiempo_tradicional > 0 else 0
    mejora_cache = ((tiempo_cache - tiempo_cache2) / tiempo_cache * 100) if tiempo_cache > 0 else 0
    
    print(f"  ‚Ä¢ Mejora con √≠ndices: {mejora_indices:.1f}%")
    print(f"  ‚Ä¢ Mejora con cache: {mejora_cache:.1f}%")
    print(f"  ‚Ä¢ Cache hit: {resultado_cache2.desde_cache}")

if __name__ == "__main__":
    print("üöÄ SISTEMA COMPLETO INTEGRADO - PRUEBA FINAL")
    print("=" * 55)
    print("Esta prueba demuestra la integraci√≥n exitosa de:")
    print("‚úÖ Sistema de historial de validaciones")
    print("‚úÖ Filtros avanzados con componentes nuevos")
    print("‚úÖ Optimizaci√≥n de rendimiento con √≠ndices y cache")
    print("‚úÖ Compatibilidad total entre m√≥dulos")
    print("‚úÖ Funcionalidades de especificaciones implementadas")
    print()
    
    # Ejecutar prueba completa
    resultado = asyncio.run(test_sistema_completo())
    
    # Ejecutar comparaci√≥n de rendimiento
    asyncio.run(test_rendimiento_comparativo())
    
    print(f"\nüéØ RESUMEN FINAL:")
    print(f"‚úÖ Veh√≠culos totales procesados: {resultado['vehiculos_totales']}")
    print(f"‚úÖ Veh√≠culos visibles (filtrados): {resultado['vehiculos_visibles']}")
    print(f"‚úÖ Veh√≠culos bloqueados: {resultado['vehiculos_bloqueados']}")
    print(f"‚úÖ Tiempo c√°lculo historial: {resultado['tiempo_historial']:.3f}s")
    print(f"‚úÖ Tiempo creaci√≥n √≠ndices: {resultado['tiempo_indices']:.3f}s")
    print(f"‚úÖ Mejora con cache: {resultado['mejora_cache']:.1f}%")
    print(f"‚úÖ Consultas paralelas: {resultado['consultas_paralelas']}")
    print(f"‚úÖ Tiempo dashboard: {resultado['tiempo_dashboard']:.3f}s")
    
    print(f"\nüéâ INTEGRACI√ìN COMPLETA EXITOSA")
    print(f"El sistema est√° listo para producci√≥n con:")
    print(f"‚Ä¢ Historial de validaciones autom√°tico")
    print(f"‚Ä¢ Filtrado inteligente de veh√≠culos")
    print(f"‚Ä¢ Rendimiento optimizado para grandes vol√∫menes")
    print(f"‚Ä¢ Compatibilidad total entre todos los m√≥dulos")
    print(f"‚Ä¢ Funcionalidades avanzadas implementadas")