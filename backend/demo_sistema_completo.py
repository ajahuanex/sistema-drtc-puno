#!/usr/bin/env python3
"""
üéâ DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE DATOS PERSISTENTES
=========================================================

Este script demuestra el funcionamiento completo del sistema:
1. Datos persistentes en memoria
2. Relaciones autom√°ticas entre m√≥dulos
3. API REST funcionando
4. Estad√≠sticas en tiempo real
5. Flujo completo de trabajo

Ejecutar con el servidor FastAPI funcionando en puerto 8000
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:8000"

def print_header(title: str):
    print(f"\n{'='*70}")
    print(f"üéâ {title}")
    print(f"{'='*70}")

def print_section(title: str):
    print(f"\nüìã {title}")
    print("-" * 60)

async def verificar_servidor():
    """Verificar que el servidor est√© funcionando"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Servidor funcionando: {data.get('service', 'FastAPI')}")
                    return True
                else:
                    print(f"‚ùå Servidor respondi√≥ con c√≥digo: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {str(e)}")
        print("   Ejecuta: uvicorn app.main:app --reload")
        return False

async def demo_estadisticas_iniciales():
    """Demostrar estad√≠sticas iniciales del sistema"""
    print_header("ESTAD√çSTICAS INICIALES DEL SISTEMA")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BASE_URL}/api/data-manager/estadisticas") as response:
            data = await response.json()
            
            if data.get("success"):
                stats = data["data"]["estadisticas_generales"]
                print_section("Resumen Ejecutivo")
                print(f"üè¢ Empresas: {stats['total_empresas']}")
                print(f"üöó Veh√≠culos: {stats['total_vehiculos']}")
                print(f"üë®‚Äçüíº Conductores: {stats['total_conductores']}")
                print(f"üõ£Ô∏è Rutas: {stats['total_rutas']}")
                print(f"üìÑ Expedientes: {stats['total_expedientes']}")
                print(f"üìã Resoluciones: {stats['total_resoluciones']}")
                
                print_section("Relaciones Activas")
                relaciones = data["data"]["relaciones_activas"]
                print(f"üîó Veh√≠culos con conductor: {relaciones['vehiculos_con_conductor']}")
                print(f"üîó Veh√≠culos sin conductor: {relaciones['vehiculos_sin_conductor']}")
                print(f"üîó Conductores con veh√≠culo: {relaciones['conductores_con_vehiculo']}")
                print(f"üîó Conductores sin veh√≠culo: {relaciones['conductores_sin_vehiculo']}")

async def demo_consulta_empresa_completa():
    """Demostrar consulta de empresa completa"""
    print_header("CONSULTA DE EMPRESA COMPLETA")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BASE_URL}/api/data-manager/empresa/1/completa") as response:
            data = await response.json()
            
            if data.get("success"):
                empresa = data["data"]
                print_section("Datos de la Empresa")
                print(f"üè¢ {empresa['razonSocial']}")
                print(f"üìã RUC: {empresa['ruc']}")
                print(f"üë§ Representante: {empresa['representanteLegal']}")
                print(f"üìû Tel√©fono: {empresa['telefono']}")
                
                print_section("Veh√≠culos de la Empresa")
                for i, vehiculo in enumerate(empresa.get('vehiculos', []), 1):
                    if vehiculo:
                        print(f"{i}. üöó {vehiculo['placa']} - {vehiculo['marca']} {vehiculo['modelo']}")
                
                print_section("Conductores de la Empresa")
                for i, conductor in enumerate(empresa.get('conductores', []), 1):
                    if conductor:
                        nombre = f"{conductor['nombres']} {conductor['apellidoPaterno']}"
                        print(f"{i}. üë®‚Äçüíº {nombre} - {conductor['codigoConductor']}")

async def demo_flujo_completo_vehiculo():
    """Demostrar flujo completo de un veh√≠culo"""
    print_header("FLUJO COMPLETO DE VEH√çCULO")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BASE_URL}/api/data-manager/vehiculo/1/flujo-completo") as response:
            data = await response.json()
            
            if data.get("success"):
                vehiculo = data["data"]
                print_section("Informaci√≥n del Veh√≠culo")
                print(f"üöó Placa: {vehiculo['placa']}")
                print(f"üè¢ Empresa: {vehiculo['empresa']['razonSocial']}")
                print(f"üîß Marca/Modelo: {vehiculo['marca']} {vehiculo['modelo']}")
                
                print_section("Timeline de Eventos (√öltimos 5)")
                for i, evento in enumerate(vehiculo.get('timeline', [])[:5], 1):
                    print(f"{i}. [{evento['fecha']}] {evento['tipo']}: {evento['descripcion']}")

async def demo_agregar_datos_dinamicos():
    """Demostrar agregado din√°mico de datos"""
    print_header("AGREGADO DIN√ÅMICO DE DATOS")
    
    # Agregar nueva empresa
    nueva_empresa = {
        "razonSocial": "Transportes Demo API S.A.C.",
        "ruc": "20888777666",
        "representanteLegal": "Demo API Manager",
        "telefono": "051-888777",
        "email": "demo@api.com",
        "direccion": "Av. Demo API 456, Puno",
        "estado": "ACTIVO",
        "fechaConstitucion": "2024-01-01",
        "modalidadServicio": "REGULAR",
        "tipoEmpresa": "PEQUE√ëA"
    }
    
    async with aiohttp.ClientSession() as session:
        print_section("Agregando Nueva Empresa")
        async with session.post(
            f"{BASE_URL}/api/data-manager/agregar/empresas",
            json=nueva_empresa,
            headers={"Content-Type": "application/json"}
        ) as response:
            data = await response.json()
            
            if data.get("success"):
                empresa_id = data["data"]["elemento_id"]
                print(f"‚úÖ Empresa agregada con ID: {empresa_id}")
                
                # Agregar veh√≠culo a la nueva empresa
                nuevo_vehiculo = {
                    "empresaId": empresa_id,
                    "placa": "DEMO-API",
                    "numeroTarjetaCirculacion": "TC-DEMO-API",
                    "marca": "DEMO",
                    "modelo": "API-2024",
                    "a√±o": 2024,
                    "numeroAsientos": 30,
                    "numeroMotor": "DEMO-API-001",
                    "numeroChasis": "DEMO-API-CHASIS",
                    "combustible": "DIESEL",
                    "cilindrada": 4000,
                    "potencia": 200,
                    "pesoSeco": 5000,
                    "pesoBruto": 8000,
                    "cargaUtil": 3000,
                    "estado": "ACTIVO",
                    "fechaFabricacion": "2024-01-15",
                    "fechaImportacion": "2024-02-20"
                }
                
                print_section("Agregando Nuevo Veh√≠culo")
                async with session.post(
                    f"{BASE_URL}/api/data-manager/agregar/vehiculos",
                    json=nuevo_vehiculo,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    data = await response.json()
                    
                    if data.get("success"):
                        vehiculo_id = data["data"]["elemento_id"]
                        print(f"‚úÖ Veh√≠culo agregado con ID: {vehiculo_id}")
                        return empresa_id, vehiculo_id
    
    return None, None

async def demo_verificar_persistencia(empresa_id, vehiculo_id):
    """Verificar que los datos agregados persisten"""
    print_header("VERIFICACI√ìN DE PERSISTENCIA")
    
    if not empresa_id or not vehiculo_id:
        print("‚ùå No hay datos nuevos para verificar")
        return
    
    async with aiohttp.ClientSession() as session:
        print_section("Verificando Empresa Reci√©n Creada")
        async with session.get(f"{BASE_URL}/api/data-manager/empresa/{empresa_id}/completa") as response:
            data = await response.json()
            
            if data.get("success"):
                empresa = data["data"]
                print(f"‚úÖ Empresa encontrada: {empresa['razonSocial']}")
                print(f"   üìä Veh√≠culos: {len(empresa.get('vehiculos', []))}")
                print(f"   üë®‚Äçüíº Conductores: {len(empresa.get('conductores', []))}")
            else:
                print("‚ùå Empresa no encontrada")
        
        print_section("Verificando Veh√≠culo Reci√©n Creado")
        async with session.get(f"{BASE_URL}/api/data-manager/vehiculo/{vehiculo_id}/completo") as response:
            data = await response.json()
            
            if data.get("success"):
                vehiculo = data["data"]
                print(f"‚úÖ Veh√≠culo encontrado: {vehiculo['placa']}")
                print(f"   üè¢ Empresa: {vehiculo['empresa']['razonSocial']}")
            else:
                print("‚ùå Veh√≠culo no encontrado")

async def demo_estadisticas_finales():
    """Mostrar estad√≠sticas finales despu√©s de agregar datos"""
    print_header("ESTAD√çSTICAS FINALES")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BASE_URL}/api/data-manager/dashboard") as response:
            data = await response.json()
            
            if data.get("success"):
                dashboard = data["data"]
                
                print_section("Resumen Ejecutivo Final")
                resumen = dashboard["resumen_ejecutivo"]
                total_entidades = sum(resumen.values())
                print(f"üìä Total Entidades: {total_entidades}")
                print(f"üè¢ Empresas: {resumen['total_empresas']}")
                print(f"üöó Veh√≠culos: {resumen['total_vehiculos']}")
                print(f"üë®‚Äçüíº Conductores: {resumen['total_conductores']}")
                
                print_section("Top Empresas por Veh√≠culos")
                for i, empresa in enumerate(dashboard.get("top_empresas", [])[:3], 1):
                    print(f"{i}. üè¢ {empresa['razon_social']}: {empresa['total_vehiculos']} veh√≠culos")
                
                print_section("Operaciones Recientes")
                for i, op in enumerate(dashboard.get("operaciones_recientes", [])[-3:], 1):
                    timestamp = op.get("timestamp", "").split("T")[1][:8] if "T" in op.get("timestamp", "") else ""
                    print(f"{i}. [{timestamp}] {op.get('tipo', '')}: {op.get('descripcion', '')}")

async def demo_busquedas():
    """Demostrar b√∫squedas por criterios"""
    print_header("B√öSQUEDAS POR CRITERIOS")
    
    async with aiohttp.ClientSession() as session:
        print_section("Veh√≠culos Activos")
        async with session.get(f"{BASE_URL}/api/data-manager/buscar/vehiculos?estado=ACTIVO") as response:
            data = await response.json()
            
            if data.get("success"):
                resultados = data["data"]["resultados"]
                print(f"üìä Encontrados: {len(resultados)} veh√≠culos activos")
                for i, vehiculo in enumerate(resultados[:3], 1):
                    print(f"{i}. üöó {vehiculo['placa']} - {vehiculo['marca']} {vehiculo['modelo']}")
        
        print_section("Conductores Activos")
        async with session.get(f"{BASE_URL}/api/data-manager/buscar/conductores?estado=ACTIVO") as response:
            data = await response.json()
            
            if data.get("success"):
                resultados = data["data"]["resultados"]
                print(f"üìä Encontrados: {len(resultados)} conductores activos")
                for i, conductor in enumerate(resultados[:3], 1):
                    nombre = f"{conductor['nombres']} {conductor['apellidoPaterno']}"
                    print(f"{i}. üë®‚Äçüíº {nombre} - {conductor['codigoConductor']}")

async def main():
    """Funci√≥n principal de la demostraci√≥n"""
    print_header("DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE DATOS PERSISTENTES")
    print("üéâ Demostrando todas las funcionalidades del DataManager...")
    print(f"üîó URL Base: {BASE_URL}")
    print(f"‚è∞ Fecha/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar servidor
    if not await verificar_servidor():
        return
    
    try:
        # Ejecutar todas las demostraciones
        await demo_estadisticas_iniciales()
        await demo_consulta_empresa_completa()
        await demo_flujo_completo_vehiculo()
        await demo_busquedas()
        
        empresa_id, vehiculo_id = await demo_agregar_datos_dinamicos()
        await demo_verificar_persistencia(empresa_id, vehiculo_id)
        await demo_estadisticas_finales()
        
        print_header("RESUMEN DE LA DEMOSTRACI√ìN")
        print("‚úÖ Todas las demostraciones completadas exitosamente")
        print("üóÑÔ∏è El sistema de datos persistentes funciona perfectamente")
        print("üîó Las relaciones se mantienen autom√°ticamente")
        print("üìä Las estad√≠sticas se actualizan en tiempo real")
        print("üåê La API REST est√° completamente funcional")
        print("‚è±Ô∏è Los datos persisten durante toda la sesi√≥n")
        
        print("\nüéØ FUNCIONALIDADES DEMOSTRADAS:")
        print("   ‚Ä¢ ‚úÖ Persistencia de datos en memoria")
        print("   ‚Ä¢ ‚úÖ Relaciones autom√°ticas entre m√≥dulos")
        print("   ‚Ä¢ ‚úÖ Estad√≠sticas globales en tiempo real")
        print("   ‚Ä¢ ‚úÖ Consultas completas con relaciones")
        print("   ‚Ä¢ ‚úÖ Flujo completo de procesos")
        print("   ‚Ä¢ ‚úÖ B√∫squedas avanzadas por criterios")
        print("   ‚Ä¢ ‚úÖ Agregado din√°mico de datos")
        print("   ‚Ä¢ ‚úÖ API REST completamente funcional")
        print("   ‚Ä¢ ‚úÖ Dashboard ejecutivo")
        print("   ‚Ä¢ ‚úÖ Timeline de eventos")
        
        print(f"\nüåê ENDPOINTS DISPONIBLES:")
        print(f"   ‚Ä¢ {BASE_URL}/api/data-manager/estadisticas")
        print(f"   ‚Ä¢ {BASE_URL}/api/data-manager/dashboard")
        print(f"   ‚Ä¢ {BASE_URL}/api/data-manager/relaciones")
        print(f"   ‚Ä¢ {BASE_URL}/docs (Documentaci√≥n Swagger)")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la demostraci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ Iniciando demostraci√≥n completa del sistema...")
    print("üìã Aseg√∫rate de que el servidor FastAPI est√© ejecut√°ndose:")
    print("   cd backend && uvicorn app.main:app --reload")
    print("\n‚è≥ Iniciando en 3 segundos...")
    
    time.sleep(3)
    
    asyncio.run(main())